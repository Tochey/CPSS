AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
    sammy

    Infrastructure for the Capstone Submission System

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 10
        MemorySize: 3008
        Runtime: nodejs14.x
        Architectures:
            - x86_64

Resources:
    CPSSApiGateway:
        Type: AWS::Serverless::Api
        Properties:
            Name: cpss-apigw
            StageName: dev
            Cors:
                AllowMethods: "'GET,POST,OPTIONS,PUT,DELETE'"
                AllowHeaders: "'*'"
                AllowOrigin: "'*'" 
                # change origins later

    # S3 Bucket to store primary submissions
    PrimarySubmissionBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: primary-submission-bucket21312

    # S3 Bucket to store indexed submissions
    IndexedSubmissionBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: indexed-submission-bucket21312
            CorsConfiguration:
                CorsRules:
                    - AllowedHeaders:
                          - "*"
                      AllowedMethods:
                          - PUT
                      AllowedOrigins:
                          - "*"

    UserTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: cpss-user
            AttributeDefinitions:
                - AttributeName: userId
                  AttributeType: S
            KeySchema:
                - AttributeName: userId
                  KeyType: HASH
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1

    PresentationTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: cpss-presentation
            AttributeDefinitions:
                - AttributeName: presentation_id
                  AttributeType: S
            KeySchema:
                - AttributeName: presentation_id
                  KeyType: HASH
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1

    TimeSlotTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: cpss-timelot
            AttributeDefinitions:
                - AttributeName: time_slot_id
                  AttributeType: S
            KeySchema:
                - AttributeName: time_slot_id
                  KeyType: HASH
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1

    RegistrationTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: cpss-registration
            AttributeDefinitions:
                - AttributeName: registration_id
                  AttributeType: S
            KeySchema:
                - AttributeName: registration_id
                  KeyType: HASH
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1

    IIam:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/iam/
            Handler: iam.lambdaHandler
            Policies:
                - SSMParameterWithSlashPrefixReadPolicy:
                      ParameterName: /cpss/admin
                - S3WritePolicy:
                      BucketName: !Ref IndexedSubmissionBucket
                - DynamoDBCrudPolicy:
                      TableName: !Ref UserTable
                - S3WritePolicy:
                      BucketName: !Ref IndexedSubmissionBucket
            Events:
                ExpressLambdaProxy:
                    Type: Api
                    Properties:
                        RestApiId: !Ref CPSSApiGateway
                        Path: "/iam/{proxy+}"
                        Method: ANY
            Environment:
                Variables:
                    INDEXEDBUCKETNAME: !Ref IndexedSubmissionBucket
                    NODE_ENV: "production"
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - iam.ts

    IPreSigned:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/pre-signed/
            Handler: pre-signed.lambdaHandler
            Environment:
                Variables:
                    INDEX_BUCKET_NAME: !Ref IndexedSubmissionBucket
                    PRIMARY_BUCKET_NAME: !Ref PrimarySubmissionBucket
            Events:
                GetPreSignedUrl:
                    Type: Api
                    Properties:
                        RestApiId: !Ref CPSSApiGateway
                        Path: /pre-signed
                        Method: post
            Policies:
                - S3ReadPolicy:
                      BucketName: !Ref IndexedSubmissionBucket
                - S3ReadPolicy:
                      BucketName: !Ref PrimarySubmissionBucket
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - pre-signed.ts
    ITransform:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/transform/
            Handler: transform.lambdaHandler
            Events:
                StudentUploadEvent:
                    Type: S3
                    Properties:
                        Bucket: !Ref IndexedSubmissionBucket
                        Events:
                            - s3:ObjectCreated:*
            Policies:
                - LambdaInvokePolicy:
                      FunctionName: !Ref IUpload
                - S3ReadPolicy:
                      BucketName: indexed-submission-bucket21312
                      #   circular dependency when referencing the bucket name?????

        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - transform.ts
    IUpload:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/upload/
            Handler: upload.lambdaHandler
            Policies:
                - SSMParameterWithSlashPrefixReadPolicy:
                      ParameterName: /cpss/algolia
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - upload.ts
    EventInvokeConfig:
        Type: AWS::Lambda::EventInvokeConfig
        Properties:
            FunctionName: !Ref ITransform
            Qualifier: $LATEST
            MaximumEventAgeInSeconds: 60
            MaximumRetryAttempts: 0
            DestinationConfig:
                OnSuccess:
                    Destination: !GetAtt IUpload.Arn
    IUser:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/user/
            Handler: user.lambdaHandler
            Environment:
                Variables:
                    NODE_ENV: "production"
                    QUEUE_URL: !GetAtt SyncQueue.QueueUrl
            Events:
                ExpressLambdaProxy:
                    Type: Api
                    Properties:
                        RestApiId: !Ref CPSSApiGateway
                        Path: "/user/{proxy+}"
                        Method: ANY
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref UserTable
                - SQSSendMessagePolicy:
                      QueueName: !Ref SyncQueue
                - DynamoDBCrudPolicy:
                      TableName: !Ref PresentationTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref TimeSlotTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref RegistrationTable
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - user.ts
    SyncQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: cpss-sync-queue
            VisibilityTimeout: 120

    SyncWorkers:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/sync/
            Handler: sync.handler
            Environment:
                Variables:
                    "USER_TABLE": !Ref UserTable
                    "SUBMISSION_BUCKET_NAME": !Ref PrimarySubmissionBucket
            Policies:
                - SQSPollerPolicy:
                      QueueName: !Ref SyncQueue
                - S3ReadPolicy:
                      BucketName: !Ref PrimarySubmissionBucket
                - S3WritePolicy:
                      BucketName: !Ref PrimarySubmissionBucket
                - DynamoDBCrudPolicy:
                      TableName: !Ref UserTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref PresentationTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref TimeSlotTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref RegistrationTable
            Events:
                SyncQueueEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SyncQueue.Arn
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - sync.ts
Outputs:
    BeseAPiEndpoint:
        Description: "Base API Endpoint"
        Value: !Sub "https://${CPSSApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/"
